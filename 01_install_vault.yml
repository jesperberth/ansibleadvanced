---
- name: Install Vault
  hosts: localhost

  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Install podman
      ansible.builtin.package:
        name: podman
        state: present
      become: true

    - name: Configure firewalld
      ansible.posix.firewalld:
        port: 8200/tcp
        permanent: true
        state: enabled
      become: true
      notify: Reload firewalld

    - name: Create Vault User
      ansible.builtin.user:
        name: vault
        shell: /bin/bash
        home: /home/vault
      become: true
      register: uservault

    - name: Enable linger for vault user
      ansible.builtin.shell: |
        loginctl enable-linger "{{ uservault['uid'] }}"
      become: true

    - name: Pull vault image
      containers.podman.podman_image:
        name: docker.io/library/vault:1.13.3
      become_user: vault
      become: true

    - name: Create directories for vault
      ansible.builtin.file:
        name: "{{ item }}"
        state: directory
        mode: '0777'
      loop:
        - /home/vault/vault/logs
        - /home/vault/vault/file
        - /home/vault/vault/config
      become_user: vault
      become: true

    - name: Copy Vault Config
      ansible.builtin.template:
        src: files/vault.local.json.j2
        dest: $HOME/vault/config/local.json
        mode: '0644'
      become_user: vault
      become: true

    - name: Gather facts on vault container
      containers.podman.podman_container_info:
        name: vault
      become_user: vault
      become: true
      register: vaultcontainer

    - name: Set vaultcontainer status
      ansible.builtin.set_fact:
        containerstatus: "{{ vaultcontainer['containers'] }}"

    - name: debug
      ansible.builtin.debug:
        msg: "{{ containerstatus }}"

    - name: Run vault container
      ansible.builtin.shell: |
        podman run -d --name vault --cap-add=IPC_LOCK -v $HOME/vault/logs:/vault/logs:z -v $HOME/vault/config:/vault/config:z -v $HOME/vault/file:/vault/file:z  -e 'SKIP_CHOWN=true' -e 'SKIP_SETCAP=true' -p 8200:8200 docker.io/library/vault:1.13.3 server
      become_user: vault
      become: true
      when: not containerstatus

    - name: Check if vault if initialized
      ansible.builtin.uri:
        url: http://127.0.0.1:8200/v1/sys/init
        method: GET
        body_format: json
        status_code: [200, 202]
        return_content: true
      register: vaultinitstatus

    - name: Set vault status
      ansible.builtin.set_fact:
        vaultstatus: "{{ vaultinitstatus['json']['initialized'] }}"

    - name: Init vault
      ansible.builtin.uri:
        url: http://127.0.0.1:8200/v1/sys/init
        method: POST
        body_format: json
        status_code: [200, 202]
        return_content: true
        body: '{"secret_shares": 1, "secret_threshold": 1}'
      register: initvault
      when: not vaultstatus

    - name: Show init
      ansible.builtin.debug:
        msg: "{{ initvault['json'] }}"
      when: not vaultstatus

    - name: Create vault secret files
      ansible.builtin.copy:
        content: "{{ initvault['json'] }}"
        dest: ~/secret.json
        mode: '0700'
      when: not vaultstatus

    - name: Set vault keys
      ansible.builtin.set_fact:
        vaultkeys: "{{ initvault['json']['keys'] }}"
        vaultkeysbase64: "{{ initvault['json']['keys_base64'] }}"
        vaultroottoken: "{{ initvault['json']['root_token'] }}"
      when: not vaultstatus

    - name: Unseal vault
      ansible.builtin.uri:
        url: http://127.0.0.1:8200/v1/sys/unseal
        method: POST
        body_format: json
        status_code: [200, 202]
        return_content: true
        body: "{\"key\": \"{{ vaultkeysbase64 }}\"}"

    # - name: Run vault container
    #   containers.podman.podman_container:
    #     name: vault
    #     image: docker.io/library/vault:1.13.3
    #     volume:
    #       - 'vault/logs:/vault/logs'
    #       - 'vault/config:/vault/config:z'
    #       - 'vault/file:/vault/file'
    #     ports:
    #       - "8200:8200"
    #     env:
    #       SKIP_CHOWN: true
    #       SKIP_SETCAP: true
    #     command: server
    #   become_user: vault
    #   become: true
  handlers:
    - name: Reload firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: reloaded
      become: true
